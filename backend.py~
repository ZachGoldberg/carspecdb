"""
Reads data from a stats collector and exposes it via HTTP
"""
import cgi
import os
import simplejson
import sys
import threading
import tenjin
import urlparse
import zlib
import SocketServer
import BaseHTTPServer
from pkg_resources import resource_filename

# A weird requirement from tenjin to have this
# The world explodes if we don't have it
from tenjin.helpers import *


def head(filename, num_lines):
    return file_process("head", filename, num_lines)


def tail(filename, num_lines):
    return file_process("tail", filename, num_lines)


def file_process(cmd, filename, num_lines):
    """
    Implementing tail in python is like 50 lines of code,
    and is pretty unreadable.  Just cop out and use something
    we know works.

    """
    stdin, stdout = os.popen2("%s -n %s %s" % (cmd, num_lines, filename))
    stdin.close()
    data = stdout.read()
    stdout.close()
    return data


class HTTPMonitorHandler(BaseHTTPServer.BaseHTTPRequestHandler):

    def __init__(self, monitor, new_handlers, *args, **kwargs):
        self.monitor = monitor

        self.handlers = {
            "/stats": self._get_stats,
            "/logs": self._get_logs,
            "/logfile": self._get_logfile,
        }

        self.handlers.update(new_handlers)
        BaseHTTPServer.BaseHTTPRequestHandler.__init__(self, *args, **kwargs)

    def do_GET(self):
        urldata = urlparse.urlparse(self.path)
        array_args = urlparse.parse_qs(urldata.query)
        args = dict([(k, v[0]) for k, v in array_args.items()])

        if not urldata.path in self.handlers:
            self.wfile.write(self._usage(args))
            return

        args['engine'] = self.engine

        try:
            output = self.handlers[urldata.path](args)
            if not output:
                output = "No Data"

            if isinstance(output, dict):
                output = self._format_dict(output, args)
                if args.get('compress'):
                    output = zlib.compress(output)

                self.wfile.write(output)
            else:
                self.wfile.write(output)
        except:
            import traceback
            self.wfile.write(traceback.format_exc())

        return

class ThreadedTCPServer(SocketServer.ThreadingMixIn, SocketServer.TCPServer):
    pass


class HTTPMonitor(object):
    def __init__(self, stats, harness, port):
        self.port = int(port)
        self.stats = stats
        self.harness = harness
        self.logmanager = harness.logmanager
        self.httpd = None
        self.stopped = False
        self.run_thread = None
        self.new_handlers = {}

    def add_handler(self, path, callback):
        self.new_handlers[path] = callback

    def get_logs(self):
        """
        Pull a list of logfiles for all of the tasks
        that this tasksitter has created.
        """
        return self.logmanager.get_logfile_names()

    def get_stats(self):
        """
        Return metadata and running stats for the process
        """
        data = self.stats.get_metadata()
        data.update(self.stats.get_live_data())
        return data

    def start(self):
        """
        Begin serving HTTP requests with stats data
        """
        if self.stopped:
            return

        self.run_thread = threading.Thread(target=self._start_server,
                                           name="HTTPServer")
        self.run_thread.start()

    def stop(self):
        """
        Stop the HTTP server
        """
        if self.httpd:
            self.httpd.shutdown()

        self.stopped = True

    def _start_server(self):
        """
        Internal method to start the server.
        """
        handler = lambda x, y, z: HTTPMonitorHandler(
            self,
            self.new_handlers, x, y, z)
        self.httpd = ThreadedTCPServer(('', self.port), handler)
        self.httpd.timeout = 1
        self.httpd.serve_forever(poll_interval=0.1)
